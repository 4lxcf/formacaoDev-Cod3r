import type { PensadorScrapingTypes } from "./types/";
/**
 *
 * @param {{query,limit}} data
 * @param {string} data.query - o termo que queira buscar (obrigatório)
 * @param {number} data.limit - a quantidade que deseja (padrão=1)
 * @description Caso queira buscar uma lista de pensamento usando algum termo específico
 * @example
 *
 *const {err,success} = await search({query:"elon musk"})
 *	//err - em caso de erro
 *	//success - em caso de sucesso ira retorna o pensamento
 * const {author, thought, query,total } = success
 */
export declare function search({ limit, query, }: PensadorScrapingTypes.IPensador): Promise<PensadorScrapingTypes.IResponse<PensadorScrapingTypes.IResponseSearch>>;
/**
 *
 * @param {{query}} data
 * @param {string} data.query - o termo que queira buscar (obrigatório)
 * @description Diferente do `bio-author` que retorna a biografia completa, aqui ira retorna um breve resumo do autor.
 * @example
 *
 *const {err,success} = await aboutAuthor({query:"elon musk"})
 *	//err - em caso de erro
 *	//success - em caso de sucesso
 * const {name, thought_total,avatar_url, info,associated,bio,tags} = success
 */
export declare function aboutAuthor({ query, }: Omit<PensadorScrapingTypes.IPensador, "limit">): Promise<PensadorScrapingTypes.IResponse<PensadorScrapingTypes.IAuthorProps>>;
/**
 *
 * @param {{query}} data
 * @param {string} data.query - o termo que queira buscar (obrigatório)
 * @description Utilizado para obter a biografia de um autor, recebe o conteúdo da pagina dividos por tópicos.
 * @example
 *
 *const {err,success} = await bioAuthor({query:"o rappa"})
 *	//err - em caso de erro
 *	//success - em caso de sucesso
 * const {associated, content,name, info,associated,title} = success
 */
export declare function bioAuthor({ query, }: Omit<PensadorScrapingTypes.IPensador, "limit">): Promise<PensadorScrapingTypes.IResponse<PensadorScrapingTypes.IBioAuthorProps>>;
/**
 * @description Ira buscar na home do site os 9 autores mais populares.
 * @example
 *
 *const {err,success} = await rankingAuthor()
 *	//err - em caso de erro
 *	//success - em caso de sucesso
 * const {avatar_url,href,name,position} = success[0] //retorna um array
 */
export declare function rankingAuthors(): Promise<PensadorScrapingTypes.IResponse<PensadorScrapingTypes.IRankingAuthorsProps[]>>;
/**
 * @param {{query}} data
 * @param {String} data.query - o termo que queira buscar (obrigatório)
 * @description Ao buscar um determinado termo, ira obter uma lista de temas associados ao termo.
 * @example
 *
 *const {err,success} = await rankingAuthor()
 *	//err - em caso de erro
 *	//success - em caso de sucesso
 * const {href,name,category} = success[0] //retorna um array
 */
export declare function getAssociated({ query, }: PensadorScrapingTypes.IPensador): Promise<PensadorScrapingTypes.IResponse<PensadorScrapingTypes.ITopicProps[]>>;
/**
 * @param {String} topic o tópico que queira buscar (obrigatório)
 * @description Caso queira um pensamento aleatório sobre algum tópico especifico ou não.
 * @example
 *
 *const {err,success} = await randomThought()
 *	//err - em caso de erro
 *	//success - em caso de sucesso
 * const {author, content, image_url, url} = success
 */
export declare function randomThought(topic?: string): Promise<PensadorScrapingTypes.IResponse<PensadorScrapingTypes.IThoughtProps>>;
