import { AxiosInstance } from "axios";
export declare namespace PensadorScrapingTypes {
    interface IAuthorProps {
        name: string;
        avatar_url: string;
        info: string;
        thought_total: number;
        associated: string[];
        tags?: string;
        bio?: string;
    }
    interface IBioAuthorProps {
        title: string;
        name: string;
        associated: string[];
        content: IContentProps[];
    }
    interface ITopicProps {
        category: string;
        href: string;
        name: string;
        thought?: IThoughtProps;
    }
    interface IContentProps {
        paragraphs: string[];
        topic: string;
    }
    interface IRankingAuthorsProps {
        name: string;
        avatar_url: string;
        href: string;
        position: number;
    }
    interface IThoughtProps {
        author: string;
        content: string;
        url: string;
        image_url?: string;
    }
    interface IPensador {
        query: string;
        limit?: number;
    }
    interface IResponse<T> {
        success?: T;
        error?: string;
    }
    interface IResponseSearch extends IResponseScrapSearch {
        query: string;
        author: IAuthorProps;
    }
    interface IResponseScrapSearch {
        total: number;
        thought: IThoughtProps[];
    }
    interface IResponsePensador {
        html?: string;
        err?: string;
    }
    class PensadorFetch {
        constructor(router: AxiosInstance);
        searchWord(q: string): Promise<IResponsePensador>;
        getAuthor(author: string): Promise<IResponsePensador>;
        getHome(): Promise<IResponsePensador>;
        getBio(author: string): Promise<IResponsePensador>;
    }
    class Scraping {
        constructor();
        searchScrap(html: string, limit: number): IResponseScrapSearch;
        authorScrap(html: string): IAuthorProps;
        rakingAuthorsScrap(html: string): IRankingAuthorsProps[];
        bioAuthorsScrap(html: string): IBioAuthorProps;
    }
    class PensadorScraping {
        constructor();
        search(data: IPensador): Promise<IResponse<IResponseSearch>>;
        aboutAuthor(data: Omit<IPensador, "limit">): Promise<IResponse<IAuthorProps>>;
        bioAuthor(data: Omit<IPensador, "limit">): Promise<IResponse<IBioAuthorProps>>;
        rankingAuthors(): Promise<IResponse<IRankingAuthorsProps[]>>;
    }
}
